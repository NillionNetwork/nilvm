name: CI
on:
  pull_request:
  push:
    branches:
      - 'staging'
      - 'trying'

env:
  SCCACHE_DISABLED: true
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_DEV_STRIP: debuginfo
defaults:
  run:
    shell: bash
jobs:
  start-runner:
    # Ignore CI temporarily while we work on new deployment implementation
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && !startsWith(github.head_ref, 'feat/')) }}
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-24.04
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instances-ids: ${{ steps.start-ec2-runner.outputs.ec2-instances-ids }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_KEY }}
          aws-region: "eu-west-1"
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: NillionNetwork/ec2-github-runner@v2.2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          runners-per-machine: 2
          number-of-machines: 1
          ec2-image-id: ami-0bdf53f97253647e5
          ec2-instance-type: c6in.8xlarge
          subnet-id: subnet-0ec4c353621eabae2
          security-group-id: sg-03ee5c56e1f467aa0
          key-name: production-github-runner-key
          iam-role-name: github-runners-production-github-runner-ec2
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "github-runner-${{ github.run_id }}-${{ github.run_number }}"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "KeyName", "Value": "github-runners-key"},
              {"Key": "Deployment", "Value": "github-runners"},
              {"Key": "Type", "Value": "GithubRunner"},
              {"Key": "User", "Value": "ec2-user"},
              {"Key": "Environment", "Value": "production"}
            ]
  checks:
    name: Checks
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    container: 
      image: public.ecr.aws/x8g8t2h7/rust-builder-gha:0.9.7
      options: -v /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Use mold as default linker
        run: ln -sf /usr/bin/mold "$(realpath /usr/bin/ld)" 

      - name: Cargo Format
        run: just cargo-format-check-all

      - name: Cargo Fetch
        run: cargo fetch

      - name: Cargo Clippy
        run: just cargo-clippy-all

      - name: Cargo Check
        run: just cargo-check-all

      - name: Check Cargo.lock Dirty
        run: |
          just check-cargo-lock-dirty

      - name: Setup nada_dsl
        run: just setup-nada_dsl

      - name: Unit Tests
        env:
          S3_TESTCONTAINERS_MINIO_IMAGE: public.ecr.aws/u6h8u3k5/minio/minio:latest
        run: |
          test_args=(
           --workspace
           --exclude functional 
           --exclude e2e 
           --exclude pynadac
           --all-features
          )
          just cargo-test ./ root $(pwd)/target/junit/root "$(printf " %s" "${test_args[*]}")"

      - name: Nada Auto Tests
        run: just run-nada-auto-tests

      - name: Functional Tests
        env:
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        run: RUST_LOG=debug just cargo-test tests/functional functional $(pwd)/target/junit/functional

      - name: Nada E2E
        run: just cargo-test tests/e2e e2e $(pwd)/target/junit/e2e

      - name: Tests Report
        uses: mikepenz/action-junit-report@v4
        if: ${{ ! cancelled() }}
        with:
          check_name: |-
            Unit tests
            Nada auto tests
            Functional tests
            e2e tests
          report_paths: |-
            **/target/junit/root/*.xml
            **/target/nada-auto-test.xml
            **/target/junit/functional/*.xml
            **/target/junit/e2e/*.xml

  release:
    name: Release
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/trying'
    needs: [ start-runner, checks ]
    uses: ./.github/workflows/release.yml
    secrets: inherit
    with:
      runner_label: ${{ needs.start-runner.outputs.label }}

  ci-status:
    name: CI Status
    runs-on: ${{ needs.start-runner.outputs.label }}
    container: public.ecr.aws/x8g8t2h7/rust-builder-gha:0.9.7
    needs: [ start-runner, checks, release ]
    if: |
      always()
      && !contains(needs.*.result, 'failure')
      && !contains(needs.*.result, 'cancelled')
    steps:
      # Step that bors will watch to know if the build was successful
      - name: CI Success
        run: echo "CI Success"

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [ start-runner, ci-status ]
    runs-on: ubuntu-24.04
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_KEY }}
          aws-region: "eu-west-1"

      - name: Stop EC2 runner
        uses: NillionNetwork/ec2-github-runner@v2.2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instances-ids: ${{ needs.start-runner.outputs.ec2-instances-ids }}
