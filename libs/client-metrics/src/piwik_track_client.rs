use anyhow::Result;
use instant::SystemTime;
use reqwest::Client;
use serde::Serialize;
use std::time::Duration;

pub struct PiwikClient {
    url: String,
    site_id: String,
    client: Client,
}

impl PiwikClient {
    pub fn new(instance_name: String, site_id: String) -> Result<PiwikClient> {
        let client = Client::builder().user_agent("RustPiwikClient/0.1").timeout(Duration::from_secs(10)).build()?;
        Ok(PiwikClient { url: format!("https://{instance_name}.piwik.pro/ppms.php"), site_id, client })
    }

    pub async fn track(&self, event: TrackEvent) -> Result<()> {
        let request = self.client.get(&self.url);

        let event = event.set_idsite_if_none(self.site_id.clone()).set_rec_if_none().set_r_if_none();

        let request = request.query(&event);

        let response = request.send().await?;

        if !response.status().is_success() {
            let status = response.status();
            let body = response.text().await?;
            return Err(anyhow::anyhow!("Failed to track: Status: {} Body: \n {}", status, body));
        }

        Ok(())
    }
}

/// Piwik tracking event.
/// Generated from [Piwik Track Open API](https://developers.piwik.pro/en/latest/data_collection/api/http_api.html#/paths/~1ppms.php/get) description using some bash foo
#[derive(Serialize, Default, Debug, Clone)]
#[allow(non_snake_case)]
pub struct TrackEvent {
    /// **Recommended** Application ID (previously Website ID).
    ///
    /// *IMPORTANT*: Requests should contain `idsite` parameter with actual UUID of one of your apps, otherwise they won't appear in reports.
    #[serde(skip_serializing_if = "Option::is_none")]
    idsite: Option<String>,

    /// **Recommended** Whether the request should be recorded.
    ///
    /// *IMPORTANT*: Requests should contain rec=1 parameter, otherwise they won't appear in reports.
    #[serde(skip_serializing_if = "Option::is_none")]
    rec: Option<i64>,

    /// **Recommended** URL of an event.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``https://example.com/path/to/page.html``
    #[serde(skip_serializing_if = "Option::is_none")]
    url: Option<String>,

    /// **Recommended** Name of event. Could be page title or custom-built path expressing the location in application.
    ///
    /// Decoded value: ``help/delivery/shipping``
    #[serde(skip_serializing_if = "Option::is_none")]
    action_name: Option<String>,

    /// **Recommended** Visitor ID.
    ///
    /// It allows you to use the application identifier of a Visitor instead of a default identifier generated by
    /// the analytics. See: [Recognizing Visitors](https://help.piwik.pro/analytics/recognizing-visitors/).
    #[serde(skip_serializing_if = "Option::is_none")]
    _id: Option<String>,

    /// **Recommended** Cache buster.
    ///
    /// Its value should be unique for every request to make sure that the request is sent to server and not
    /// read from a cache. Value can be random or sequential (e.g. UNIX timestamp). It is especially useful if
    /// the visitor is behind some kind of caching proxy.
    #[serde(skip_serializing_if = "Option::is_none")]
    r: Option<String>,

    /// HTTP referrer.
    ///
    /// The URL of the previous page that linked to current one.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``http://example.com/path/to/previous/page.html``
    #[serde(skip_serializing_if = "Option::is_none")]
    urlref: Option<String>,

    /// [Custom variables](https://help.piwik.pro/analytics/custom-variables/) set in the ``session`` scope.
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ``{"1":["AspectRatio","16:9"],"2":["Height","1080"],"3":["Width","1920"]}``
    ///
    /// Format: Object serialized with JSON:
    ///  - key - (`string`) Custom variable ID
    ///  - value - Array with:
    ///    - (`string`) Custom variable name, max length: 200 characters
    ///    - (`string`) Custom variable value, max length: 200 characters
    #[serde(skip_serializing_if = "Option::is_none")]
    _cvar: Option<String>,

    /// [Custom variables](https://help.piwik.pro/analytics/custom-variables/) set in the ``event`` scope.
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ``{"1":["AspectRatio","16:9"],"2":["Height","1080"],"3":["Width","1920"]}``
    ///
    /// Format: Object serialized with JSON:
    ///  - key - (`string`) Custom variable ID
    ///  - value - Array with:
    ///    - (`string`) Custom variable name, max length: 200 characters
    ///    - (`string`) Custom variable value, max length: 200 characters
    #[serde(skip_serializing_if = "Option::is_none")]
    cvar: Option<String>,

    /// Visit counter.
    ///
    /// It sets the visit number of the visitor. It should be used when the application already tracks how many times the visitor
    /// used it and you want to override default visit counter.
    #[serde(skip_serializing_if = "Option::is_none")]
    _idvc: Option<i64>,

    /// Time of previous visit in UNIX timestamp format (number of seconds since 1970-01-01).
    #[serde(skip_serializing_if = "Option::is_none")]
    _viewts: Option<i64>,

    /// Time of first visit.
    #[serde(skip_serializing_if = "Option::is_none")]
    _idts: Option<i64>,

    /// Resolution of the visitor's device in pixels.
    #[serde(skip_serializing_if = "Option::is_none")]
    res: Option<String>,

    /// Hour when the request was made in the visitor's local time.
    #[serde(skip_serializing_if = "Option::is_none")]
    h: Option<i64>,

    /// Minute when the request was made in the visitor's local time.
    #[serde(skip_serializing_if = "Option::is_none")]
    m: Option<i64>,

    /// Second when the request was made in the visitor's local time.
    #[serde(skip_serializing_if = "Option::is_none")]
    s: Option<i64>,

    /// `User-Agent` browser value. It can be used to override value send in request HTTP header.
    ///
    /// It is used to detect Visitors browser and operating system.
    ///
    /// Decoded value: ``Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36``
    #[serde(skip_serializing_if = "Option::is_none")]
    ua: Option<String>,

    /// `Accept-Language` browser value. It can be used to override value send in request HTTP header.
    ///
    /// It's used to guess Visitors country when GeoIP is not able to determine it.
    ///
    /// Decoded value: ``en-US,en;q=0.9,pl;q=0.8``
    #[serde(skip_serializing_if = "Option::is_none")]
    lang: Option<String>,

    /// User ID.
    ///
    /// Can be used to identify Visitor by the application (e.g. login name, email address or internal
    /// user ID). See: [Recognizing Visitors](https://help.piwik.pro/analytics/recognizing-visitors/).
    ///
    /// Decoded value ``PhilipFry@example.com``
    #[serde(skip_serializing_if = "Option::is_none")]
    uid: Option<String>,

    /// Configuration ID.
    ///
    /// Semi-unique hash generated for the visitor's browser (based on configuration and installed plugins).
    /// This parameter overwrites visitor's `visitor_id` sent with `_id` parameter. For further explanation
    /// please read the following article:
    /// [Recognizing Visitors](https://help.piwik.pro/analytics/recognizing-visitors/) - the `VisitorID` section.
    #[serde(skip_serializing_if = "Option::is_none")]
    cid: Option<String>,

    /// [Custom dimension](https://help.piwik.pro/analytics/custom-dimensions/) value for specific ID.
    /// Assigns arbitrary value to specific `session` or `event` dimension.
    ///
    /// ``ID`` in the parameter name should be replaced with its integer value (e.g. `dimension1`, `dimension2`,
    /// `dimension999`).
    ///
    /// It is possible to override page view's event custom dimension by sending ping request with updated dimension value.
    ///
    /// Decoded value: ``blue crab cult(not that blue)``
    #[serde(skip_serializing_if = "Option::is_none")]
    dimensionID: Option<String>,

    /// Force start of new visit when value is ``1``.
    #[serde(skip_serializing_if = "Option::is_none")]
    new_visit: Option<i64>,

    /// External URL opened by the Visitor. It is recommended to set ``url`` parameter to same value.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``http://help-example.com/how-to/register.html``
    #[serde(skip_serializing_if = "Option::is_none")]
    link: Option<String>,

    /// URL of downloaded file.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``http://example.com/files/TermsOfService.pdf``
    #[serde(skip_serializing_if = "Option::is_none")]
    download: Option<String>,

    /// Internal search query. Used for tracking keyword the visitor searched for in the application.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// Requests with this parameter create Search events.
    ///
    /// Decoded value: ``sherlock holmes``
    #[serde(skip_serializing_if = "Option::is_none")]
    search: Option<String>,

    /// Internal search category. Used for tracking category the visitor specified during a search in the application.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// Requests with this parameter create Search events.
    ///
    /// Deprecated in favor of `search_cats` parameter.
    ///
    /// Decoded value: ``Movies & TV``
    #[serde(skip_serializing_if = "Option::is_none")]
    search_cat: Option<String>,

    /// Internal search categories. Used for tracking categories the visitor specified during a search in the application.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ["Movies & TV","Cartoons","Video games"]
    ///
    /// Requests with this parameter create Search events.
    ///
    /// The provided value must be a JSON-serialized array of strings.
    #[serde(skip_serializing_if = "Option::is_none")]
    search_cats: Option<String>,

    /// Internal search result count. Number of results found in a search.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// Requests with this parameter create Search events.
    #[serde(skip_serializing_if = "Option::is_none")]
    search_count: Option<i64>,

    /// Unique page view ID generated when the page is loaded.
    ///
    /// Used to connect future events with the last page view.
    #[serde(skip_serializing_if = "Option::is_none")]
    pv_id: Option<String>,

    /// Goal ID. Signifies that a goal has been reached and tracks its conversion.
    ///
    /// **Accepts either Goal UUID or legacy integer Goal ID.**
    ///
    /// Value ``0`` is reserved for E-commerce cart tracking.
    #[serde(skip_serializing_if = "Option::is_none")]
    idgoal: Option<String>,

    /// Revenue value of achieved goal.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    #[serde(skip_serializing_if = "Option::is_none")]
    revenue: Option<f64>,

    /// Type of event in tracking request. Used for some event types. Decides how other parameters will be interpreted.
    #[serde(skip_serializing_if = "Option::is_none")]
    e_t: Option<String>,

    /// E-commerce order ID.
    ///
    /// Decoded value: ``order-123 customer-321``
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_id: Option<String>,

    /// Alias for `ec_products`. Use new parameter `ec_products`.
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_items: Option<String>,

    /// Contents of the E-commerce cart in form of two dimensional, index positioned JSON array. This is NOT an assiociative array.
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ```[
    ///  [
    ///      "craft-311",
    ///      "Unicorn Iron on Patch",
    ///      "Crafts & Sewing",
    ///      4.99,
    ///      3,
    ///      "FairyTales",
    ///      "3-color rainbow"
    ///  ],
    ///  [
    ///      "craft-312",
    ///      "Unicorn Lamp",
    ///      [
    ///        "Crafts & Sewing",
    ///        "Lamps"
    ///      ],
    ///      13.25,
    ///      1,
    ///      "FairyTales",
    ///      "black-and-white",
    ///      {
    ///        "1":"custom glitter"
    ///      }
    ///  ]
    /// ]```
    ///
    /// Each product on the list can contain:
    ///
    ///  - [0] sku: `string` (required) Stock keeping unit. Max 1024 bytes long.
    ///  - [1] name: `string` (optional) Name of a product. Max 1024 bytes long.
    ///  - [2] category: `string|Array<string>` (optional) Category of a product. Max 5 categories, each 1024 bytes long.
    ///  - [3] price: `number` (optional) Price of a product.
    ///    Currency of this value does not matter, but only one should be used by the application (e.g. USD).
    ///  - [4] quantity: `integer` (optional, default to 1) Quantity of a product.
    ///  - [5] brand: `string` (optional) a brand of the product
    ///  - [6] variant: `string` (optional) a variant of the product
    ///  - [7] product custom dimensions: `Object<string, string>` a dictionary of custom dimension values, numeric string ID and a string with value. Max 20 product custom dimensions, 20 is max ID.
    ///
    /// Legend: [index] name: `data type` (requisite) Desctiption. Restrictions.
    ///
    /// E-commerce cart must not contain more than 100 products.
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_products: Option<String>,

    /// E-commerce order sub-total (order cost without shipping).
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_st: Option<f64>,

    /// E-commerce order tax.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_tx: Option<f64>,

    /// E-commerce order shipping.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_sh: Option<f64>,

    /// E-commerce order discount.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    #[serde(skip_serializing_if = "Option::is_none")]
    ec_dt: Option<f64>,

    /// Time of the last E-commerce order in UNIX timestamp format (number of seconds since 1970-01-01).
    #[serde(skip_serializing_if = "Option::is_none")]
    _ects: Option<i64>,

    /// Page generation and load time in milliseconds.
    #[serde(skip_serializing_if = "Option::is_none")]
    gt_ms: Option<i64>,

    /// Page charset.
    ///
    /// Used for decoding parameters in event URL.
    #[serde(skip_serializing_if = "Option::is_none")]
    cs: Option<String>,

    /// Status of Cookie capability in Visitor's browser (value "1" indicates that it is enabled).
    #[serde(skip_serializing_if = "Option::is_none")]
    cookie: Option<i64>,

    /// Status of Flash plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    fla: Option<i64>,

    /// Status of Java plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    java: Option<i64>,

    /// Status of Adobe Director plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    dir: Option<i64>,

    /// Status of QuickTime plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    qt: Option<i64>,

    /// Status of RealPlayer plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    realp: Option<i64>,

    /// Status of PDF plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    pdf: Option<i64>,

    /// Status of Windows Media Player plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    wma: Option<i64>,

    /// Status of (Google) Gears plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    gears: Option<i64>,

    /// Status of Silverlight plugin in Visitor's browser (value "1" indicates that it is installed).
    #[serde(skip_serializing_if = "Option::is_none")]
    ag: Option<i64>,

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) category.
    #[serde(skip_serializing_if = "Option::is_none")]
    e_c: Option<String>,

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) action.
    #[serde(skip_serializing_if = "Option::is_none")]
    e_a: Option<String>,

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) name.
    #[serde(skip_serializing_if = "Option::is_none")]
    e_n: Option<String>,

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) value.
    #[serde(skip_serializing_if = "Option::is_none")]
    e_v: Option<f64>,

    /// [Content](https://help.piwik.pro/support/reports/content-performance-report/) name.
    #[serde(skip_serializing_if = "Option::is_none")]
    c_n: Option<String>,

    /// '[Content](https://help.piwik.pro/support/reports/content-performance-report/) piece.'
    ///
    /// Decoded value: ``Unicorn Iron on Patch``
    #[serde(skip_serializing_if = "Option::is_none")]
    c_p: Option<String>,

    /// '[Content](https://help.piwik.pro/support/reports/content-performance-report/) target.'
    ///
    /// Decoded value: ``http://example.com/product/unicorn-iron-on-path.html``
    #[serde(skip_serializing_if = "Option::is_none")]
    c_t: Option<String>,

    /// '[Content](https://help.piwik.pro/support/reports/content-performance-report/) interaction.'
    ///
    /// Decoded value: ``show details``
    #[serde(skip_serializing_if = "Option::is_none")]
    c_i: Option<String>,

    /// Whether the server should respond with a 1 pixel GIF:
    ///
    /// - ``0`` - return text/html [No content]
    /// - ``1`` - return image/gif [1 pixel GIF]
    #[serde(skip_serializing_if = "Option::is_none")]
    send_image: Option<i64>,

    /// Override IP.
    cip: Option<String>,

    /// Override request time. You can use it when importing HTTP logs.
    ///
    /// Decoded value: ``2018-02-24 15:34:48``
    #[serde(skip_serializing_if = "Option::is_none")]
    cdt: Option<String>,

    /// Override country.
    #[serde(skip_serializing_if = "Option::is_none")]
    country: Option<String>,

    /// Override region.
    ///
    /// Format of [region codes](https://www.maxmind.com/download/geoip/misc/region_codes.csv) is defined in
    /// [MaxMind's](https://www.maxmind.com/) GeoIP database.
    #[serde(skip_serializing_if = "Option::is_none")]
    region: Option<String>,

    /// Override city.
    ///
    /// Decoded value: ``New York``
    #[serde(skip_serializing_if = "Option::is_none")]
    city: Option<String>,

    /// Override latitude.
    #[serde(skip_serializing_if = "Option::is_none")]
    lat: Option<f64>,

    /// Override longitude.
    #[serde(skip_serializing_if = "Option::is_none")]
    lon: Option<f64>,

    /// Whether the user should be tracked anonymously.
    ///
    /// - ``1`` - all IP bytes will be masked (0.0.0.0), GeoIP data below Country level will be anonymized
    /// - ``0`` - available visitor data will be added to the session
    #[serde(skip_serializing_if = "Option::is_none")]
    uia: Option<i64>,

    /// Indicator of a ping event. Pings update custom variables, custom
    /// dimensions and time metrics of the last page view. They help us
    /// determine time spent on a page.
    ///
    /// - ``1`` - Periodic heartbeat request (sent every X seconds)
    /// - ``2`` - Last heartbeat (sent on page unload event)
    /// - ``3`` - Blur heartbeat (sent on page blur event)
    /// - ``4`` - Request deanonymizing user
    /// - ``5`` - Request with page performance metrics
    /// - ``6`` - Request sent by the user (using ping command)
    #[serde(skip_serializing_if = "Option::is_none")]
    ping: Option<i64>,

    /// Unload Event Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.unloadEventStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_us: Option<i64>,

    /// Unload Event End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.unloadEventEnd`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ue: Option<i64>,

    /// Redirect Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.redirectStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_rs: Option<i64>,

    /// Redirect End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.redirectEnd`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_re: Option<i64>,

    /// Secure Connection Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.secureConnectionStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ss: Option<i64>,

    /// Fetch Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.fetchStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_fs: Option<i64>,

    /// Domain Lookup Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domainLookupStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ds: Option<i64>,

    /// Connect Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.connectStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_cs: Option<i64>,

    /// Connect End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.connectEnd`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ce: Option<i64>,

    /// Request Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.requestStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_qs: Option<i64>,

    /// Response Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.responseStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_as: Option<i64>,

    /// Response End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.responseEnd`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ae: Option<i64>,

    /// DOM Loading - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domLoading`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_dl: Option<i64>,

    /// DOM Interactive - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domInteractive`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_di: Option<i64>,

    /// DOM Content Loaded Event Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domContentLoadedEventStart`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ls: Option<i64>,

    /// DOM Content Loaded Event End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domContentLoadedEventEnd`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_le: Option<i64>,

    /// DOM Complete - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domComplete`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_dc: Option<i64>,

    /// Load Event End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.loadEventEnd`
    #[serde(skip_serializing_if = "Option::is_none")]
    t_ee: Option<i64>,

    /// Name of a library used for tracking.
    ///
    /// Decoded value: ``iOs SDK``
    #[serde(skip_serializing_if = "Option::is_none")]
    ts_n: Option<String>,

    /// Version of a library used for tracking. [Semantic Versioning](https://semver.org) format required.
    #[serde(skip_serializing_if = "Option::is_none")]
    ts_v: Option<String>,

    /// Provides on-demand control of the SessionHash feature (0=disabled, 1=enabled)
    ///
    /// When this parameter is not used, processing service will default to the current value from the Privacy tab in global or app settings.
    #[serde(skip_serializing_if = "Option::is_none")]
    sh: Option<i64>,

    /// Forces tracker to erase IP information from `cip` query parameter, common headers and socket address when provided with value `1`.
    ///
    /// The erasure happens before the processing, so that IP information is not stored.
    #[serde(skip_serializing_if = "Option::is_none")]
    rmip: Option<i64>,
}

#[allow(dead_code)]
impl TrackEvent {
    pub fn new() -> Self {
        Default::default()
    }

    /// Sets the `idsite` parameter if it is not already set.
    pub fn set_idsite_if_none(mut self, _idsite: String) -> Self {
        if self.idsite.is_none() {
            self.idsite = Some(_idsite);
        }
        self
    }

    /// Sets the `rec` parameter to 1 , so the event is saved if it is not already set.
    pub fn set_rec_if_none(mut self) -> Self {
        if self.rec.is_none() {
            self.rec = Some(1);
        }
        self
    }

    /// Sets the `r` parameter to the current timestamp, so the request is not cached in possible http cache servers.
    pub fn set_r_if_none(mut self) -> Self {
        if self.r.is_none() {
            let now = SystemTime::now();
            let since_the_epoch = now.duration_since(SystemTime::UNIX_EPOCH).unwrap_or(Duration::from_secs(0));
            self.r = Some(since_the_epoch.as_secs_f64().to_string());
        }
        self
    }

    /// **Recommended** Application ID (previously Website ID).
    ///
    /// *IMPORTANT*: Requests should contain `idsite` parameter with actual UUID of one of your apps, otherwise they won't appear in reports.
    pub fn idsite(mut self, idsite: String) -> Self {
        self.idsite = Some(idsite);
        self
    }

    /// **Recommended** Whether the request should be recorded.
    ///
    /// *IMPORTANT*: Requests should contain rec=1 parameter, otherwise they won't appear in reports.
    pub fn rec(mut self, rec: i64) -> Self {
        self.rec = Some(rec);
        self
    }

    /// **Recommended** URL of an event.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``https://example.com/path/to/page.html``
    pub fn url(mut self, url: String) -> Self {
        self.url = Some(url);
        self
    }

    /// **Recommended** Name of event. Could be page title or custom-built path expressing the location in application.
    ///
    /// Decoded value: ``help/delivery/shipping``
    pub fn action_name(mut self, action_name: String) -> Self {
        self.action_name = Some(action_name);
        self
    }

    /// **Recommended** Visitor ID.
    ///
    /// It allows you to use the application identifier of a Visitor instead of a default identifier generated by
    /// the analytics. See: [Recognizing Visitors](https://help.piwik.pro/analytics/recognizing-visitors/).
    pub fn _id(mut self, _id: String) -> Self {
        self._id = Some(_id);
        self
    }

    /// **Recommended** Cache buster.
    ///
    /// Its value should be unique for every request to make sure that the request is sent to server and not
    /// read from a cache. Value can be random or sequential (e.g. UNIX timestamp). It is especially useful if
    /// the visitor is behind some kind of caching proxy.
    pub fn r(mut self, r: String) -> Self {
        self.r = Some(r);
        self
    }

    /// HTTP referrer.
    ///
    /// The URL of the previous page that linked to current one.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``http://example.com/path/to/previous/page.html``
    pub fn urlref(mut self, urlref: String) -> Self {
        self.urlref = Some(urlref);
        self
    }

    /// [Custom variables](https://help.piwik.pro/analytics/custom-variables/) set in the ``session`` scope.
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ``{"1":["AspectRatio","16:9"],"2":["Height","1080"],"3":["Width","1920"]}``
    ///
    /// Format: Object serialized with JSON:
    ///  - key - (`string`) Custom variable ID
    ///  - value - Array with:
    ///    - (`string`) Custom variable name, max length: 200 characters
    ///    - (`string`) Custom variable value, max length: 200 characters
    pub fn _cvar(mut self, _cvar: String) -> Self {
        self._cvar = Some(_cvar);
        self
    }

    /// [Custom variables](https://help.piwik.pro/analytics/custom-variables/) set in the ``event`` scope.
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ``{"1":["AspectRatio","16:9"],"2":["Height","1080"],"3":["Width","1920"]}``
    ///
    /// Format: Object serialized with JSON:
    ///  - key - (`string`) Custom variable ID
    ///  - value - Array with:
    ///    - (`string`) Custom variable name, max length: 200 characters
    ///    - (`string`) Custom variable value, max length: 200 characters
    pub fn cvar(mut self, cvar: String) -> Self {
        self.cvar = Some(cvar);
        self
    }

    /// Visit counter.
    ///
    /// It sets the visit number of the visitor. It should be used when the application already tracks how many times the visitor
    /// used it and you want to override default visit counter.
    pub fn _idvc(mut self, _idvc: i64) -> Self {
        self._idvc = Some(_idvc);
        self
    }

    /// Time of previous visit in UNIX timestamp format (number of seconds since 1970-01-01).
    pub fn _viewts(mut self, _viewts: i64) -> Self {
        self._viewts = Some(_viewts);
        self
    }

    /// Time of first visit.
    pub fn _idts(mut self, _idts: i64) -> Self {
        self._idts = Some(_idts);
        self
    }

    /// Resolution of the visitor's device in pixels.
    pub fn res(mut self, res: String) -> Self {
        self.res = Some(res);
        self
    }

    /// Hour when the request was made in the visitor's local time.
    pub fn h(mut self, h: i64) -> Self {
        self.h = Some(h);
        self
    }

    /// Minute when the request was made in the visitor's local time.
    pub fn m(mut self, m: i64) -> Self {
        self.m = Some(m);
        self
    }

    /// Second when the request was made in the visitor's local time.
    pub fn s(mut self, s: i64) -> Self {
        self.s = Some(s);
        self
    }

    /// `User-Agent` browser value. It can be used to override value send in request HTTP header.
    ///
    /// It is used to detect Visitors browser and operating system.
    ///
    /// Decoded value: ``Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36``
    pub fn ua(mut self, ua: String) -> Self {
        self.ua = Some(ua);
        self
    }

    /// `Accept-Language` browser value. It can be used to override value send in request HTTP header.
    ///
    /// It's used to guess Visitors country when GeoIP is not able to determine it.
    ///
    /// Decoded value: ``en-US,en;q=0.9,pl;q=0.8``
    pub fn lang(mut self, lang: String) -> Self {
        self.lang = Some(lang);
        self
    }

    /// User ID.
    ///
    /// Can be used to identify Visitor by the application (e.g. login name, email address or internal
    /// user ID). See: [Recognizing Visitors](https://help.piwik.pro/analytics/recognizing-visitors/).
    ///
    /// Decoded value ``PhilipFry@example.com``
    pub fn uid(mut self, uid: String) -> Self {
        self.uid = Some(uid);
        self
    }

    /// Configuration ID.
    ///
    /// Semi-unique hash generated for the visitor's browser (based on configuration and installed plugins).
    /// This parameter overwrites visitor's `visitor_id` sent with `_id` parameter. For further explanation
    /// please read the following article:
    /// [Recognizing Visitors](https://help.piwik.pro/analytics/recognizing-visitors/) - the `VisitorID` section.
    pub fn cid(mut self, cid: String) -> Self {
        self.cid = Some(cid);
        self
    }

    /// Force start of new visit when value is ``1``.
    pub fn new_visit(mut self, new_visit: i64) -> Self {
        self.new_visit = Some(new_visit);
        self
    }

    /// [Custom dimension](https://help.piwik.pro/analytics/custom-dimensions/) value for specific ID.
    /// Assigns arbitrary value to specific `session` or `event` dimension.
    ///
    /// ``ID`` in the parameter name should be replaced with its integer value (e.g. `dimension1`, `dimension2`,
    /// `dimension999`).
    ///
    /// It is possible to override page view's event custom dimension by sending ping request with updated dimension value.
    ///
    /// Decoded value: ``blue crab cult(not that blue)``
    #[allow(non_snake_case)]
    pub fn dimensionID(mut self, dimensionID: String) -> Self {
        self.dimensionID = Some(dimensionID);
        self
    }

    /// External URL opened by the Visitor. It is recommended to set ``url`` parameter to same value.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``http://help-example.com/how-to/register.html``
    pub fn link(mut self, link: String) -> Self {
        self.link = Some(link);
        self
    }

    /// URL of downloaded file.
    ///
    /// *IMPORTANT*: URL/URI has to have authority or `mailto` scheme.
    /// You can lean more about authority and scheme [here](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Example_URIs).
    ///
    /// Decoded value: ``http://example.com/files/TermsOfService.pdf``
    pub fn download(mut self, download: String) -> Self {
        self.download = Some(download);
        self
    }

    /// Internal search query. Used for tracking keyword the visitor searched for in the application.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// Requests with this parameter create Search events.
    ///
    /// Decoded value: ``sherlock holmes``
    pub fn search(mut self, search: String) -> Self {
        self.search = Some(search);
        self
    }

    /// Internal search category. Used for tracking category the visitor specified during a search in the application.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// Requests with this parameter create Search events.
    ///
    /// Deprecated in favor of `search_cats` parameter.
    ///
    /// Decoded value: ``Movies & TV``
    pub fn search_cat(mut self, search_cat: String) -> Self {
        self.search_cat = Some(search_cat);
        self
    }

    /// Internal search categories. Used for tracking categories the visitor specified during a search in the application.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ["Movies & TV","Cartoons","Video games"]
    ///
    /// Requests with this parameter create Search events.
    ///
    /// The provided value must be a JSON-serialized array of strings.
    pub fn search_cats(mut self, search_cats: String) -> Self {
        self.search_cats = Some(search_cats);
        self
    }

    /// Internal search result count. Number of results found in a search.
    /// See: [Site search](https://help.piwik.pro/support/reports/internal-search-report/).
    ///
    /// Requests with this parameter create Search events.
    pub fn search_count(mut self, search_count: i64) -> Self {
        self.search_count = Some(search_count);
        self
    }

    /// Unique page view ID generated when the page is loaded.
    ///
    /// Used to connect future events with the last page view.
    pub fn pv_id(mut self, pv_id: String) -> Self {
        self.pv_id = Some(pv_id);
        self
    }

    /// Goal ID. Signifies that a goal has been reached and tracks its conversion.
    ///
    /// **Accepts either Goal UUID or legacy integer Goal ID.**
    ///
    /// Value ``0`` is reserved for E-commerce cart tracking.
    pub fn idgoal(mut self, idgoal: String) -> Self {
        self.idgoal = Some(idgoal);
        self
    }

    /// Revenue value of achieved goal.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    pub fn revenue(mut self, revenue: f64) -> Self {
        self.revenue = Some(revenue);
        self
    }

    /// Type of event in tracking request. Used for some event types. Decides how other parameters will be interpreted.
    pub fn e_t(mut self, e_t: String) -> Self {
        self.e_t = Some(e_t);
        self
    }

    /// E-commerce order ID.
    ///
    /// Decoded value: ``order-123 customer-321``
    pub fn ec_id(mut self, ec_id: String) -> Self {
        self.ec_id = Some(ec_id);
        self
    }

    /// Alias for `ec_products`. Use new parameter `ec_products`.
    pub fn ec_items(mut self, ec_items: String) -> Self {
        self.ec_items = Some(ec_items);
        self
    }

    /// Contents of the E-commerce cart in form of two dimensional, index positioned JSON array. This is NOT an assiociative array.
    ///
    /// *IMPORTANT:* value have to be urlencoded in raw URL, below is decoded JSON, do not use it directly in raw URL.
    ///
    /// Decoded value: ```[
    ///  [
    ///      "craft-311",
    ///      "Unicorn Iron on Patch",
    ///      "Crafts & Sewing",
    ///      4.99,
    ///      3,
    ///      "FairyTales",
    ///      "3-color rainbow"
    ///  ],
    ///  [
    ///      "craft-312",
    ///      "Unicorn Lamp",
    ///      [
    ///        "Crafts & Sewing",
    ///        "Lamps"
    ///      ],
    ///      13.25,
    ///      1,
    ///      "FairyTales",
    ///      "black-and-white",
    ///      {
    ///        "1":"custom glitter"
    ///      }
    ///  ]
    /// ]```
    ///
    /// Each product on the list can contain:
    ///
    ///  - [0] sku: `string` (required) Stock keeping unit. Max 1024 bytes long.
    ///  - [1] name: `string` (optional) Name of a product. Max 1024 bytes long.
    ///  - [2] category: `string|Array<string>` (optional) Category of a product. Max 5 categories, each 1024 bytes long.
    ///  - [3] price: `number` (optional) Price of a product.
    ///    Currency of this value does not matter, but only one should be used by the application (e.g. USD).
    ///  - [4] quantity: `integer` (optional, default to 1) Quantity of a product.
    ///  - [5] brand: `string` (optional) a brand of the product
    ///  - [6] variant: `string` (optional) a variant of the product
    ///  - [7] product custom dimensions: `Object<string, string>` a dictionary of custom dimension values, numeric string ID and a string with value. Max 20 product custom dimensions, 20 is max ID.
    ///
    /// Legend: [index] name: `data type` (requisite) Desctiption. Restrictions.
    ///
    /// E-commerce cart must not contain more than 100 products.
    pub fn ec_products(mut self, ec_products: String) -> Self {
        self.ec_products = Some(ec_products);
        self
    }

    /// E-commerce order sub-total (order cost without shipping).
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    pub fn ec_st(mut self, ec_st: f64) -> Self {
        self.ec_st = Some(ec_st);
        self
    }

    /// E-commerce order tax.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    pub fn ec_tx(mut self, ec_tx: f64) -> Self {
        self.ec_tx = Some(ec_tx);
        self
    }

    /// E-commerce order shipping.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    pub fn ec_sh(mut self, ec_sh: f64) -> Self {
        self.ec_sh = Some(ec_sh);
        self
    }

    /// E-commerce order discount.
    ///
    /// Currency of the value does not matter, but only one should be used by the application (e.g. USD).
    pub fn ec_dt(mut self, ec_dt: f64) -> Self {
        self.ec_dt = Some(ec_dt);
        self
    }

    /// Time of the last E-commerce order in UNIX timestamp format (number of seconds since 1970-01-01).
    pub fn _ects(mut self, _ects: i64) -> Self {
        self._ects = Some(_ects);
        self
    }

    /// Page generation and load time in milliseconds.
    pub fn gt_ms(mut self, gt_ms: i64) -> Self {
        self.gt_ms = Some(gt_ms);
        self
    }

    /// Page charset.
    ///
    /// Used for decoding parameters in event URL.
    pub fn cs(mut self, cs: String) -> Self {
        self.cs = Some(cs);
        self
    }

    /// Status of Cookie capability in Visitor's browser (value "1" indicates that it is enabled).
    pub fn cookie(mut self, cookie: i64) -> Self {
        self.cookie = Some(cookie);
        self
    }

    /// Status of Flash plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn fla(mut self, fla: i64) -> Self {
        self.fla = Some(fla);
        self
    }

    /// Status of Java plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn java(mut self, java: i64) -> Self {
        self.java = Some(java);
        self
    }

    /// Status of Adobe Director plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn dir(mut self, dir: i64) -> Self {
        self.dir = Some(dir);
        self
    }

    /// Status of QuickTime plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn qt(mut self, qt: i64) -> Self {
        self.qt = Some(qt);
        self
    }

    /// Status of RealPlayer plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn realp(mut self, realp: i64) -> Self {
        self.realp = Some(realp);
        self
    }

    /// Status of PDF plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn pdf(mut self, pdf: i64) -> Self {
        self.pdf = Some(pdf);
        self
    }

    /// Status of Windows Media Player plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn wma(mut self, wma: i64) -> Self {
        self.wma = Some(wma);
        self
    }

    /// Status of (Google) Gears plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn gears(mut self, gears: i64) -> Self {
        self.gears = Some(gears);
        self
    }

    /// Status of Silverlight plugin in Visitor's browser (value "1" indicates that it is installed).
    pub fn ag(mut self, ag: i64) -> Self {
        self.ag = Some(ag);
        self
    }

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) category.
    pub fn e_c(mut self, e_c: String) -> Self {
        self.e_c = Some(e_c);
        self
    }

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) action.
    pub fn e_a(mut self, e_a: String) -> Self {
        self.e_a = Some(e_a);
        self
    }

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) name.
    pub fn e_n(mut self, e_n: String) -> Self {
        self.e_n = Some(e_n);
        self
    }

    /// [Custom event](https://help.piwik.pro/support/reports/custom-event-report/) value.
    pub fn e_v(mut self, e_v: f64) -> Self {
        self.e_v = Some(e_v);
        self
    }

    /// [Content](https://help.piwik.pro/support/reports/content-performance-report/) name.
    pub fn c_n(mut self, c_n: String) -> Self {
        self.c_n = Some(c_n);
        self
    }

    /// '[Content](https://help.piwik.pro/support/reports/content-performance-report/) piece.'
    ///
    /// Decoded value: ``Unicorn Iron on Patch``
    pub fn c_p(mut self, c_p: String) -> Self {
        self.c_p = Some(c_p);
        self
    }

    /// '[Content](https://help.piwik.pro/support/reports/content-performance-report/) target.'
    ///
    /// Decoded value: ``http://example.com/product/unicorn-iron-on-path.html``
    pub fn c_t(mut self, c_t: String) -> Self {
        self.c_t = Some(c_t);
        self
    }

    /// '[Content](https://help.piwik.pro/support/reports/content-performance-report/) interaction.'
    ///
    /// Decoded value: ``show details``
    pub fn c_i(mut self, c_i: String) -> Self {
        self.c_i = Some(c_i);
        self
    }

    /// Whether the server should respond with a 1 pixel GIF:
    ///
    /// - ``0`` - return text/html [No content]
    /// - ``1`` - return image/gif [1 pixel GIF]
    pub fn send_image(mut self, send_image: i64) -> Self {
        self.send_image = Some(send_image);
        self
    }

    /// Override IP.
    pub fn cip(mut self, cip: String) -> Self {
        self.cip = Some(cip);
        self
    }

    /// Override request time. You can use it when importing HTTP logs.
    ///
    /// Decoded value: ``2018-02-24 15:34:48``
    pub fn cdt(mut self, cdt: String) -> Self {
        self.cdt = Some(cdt);
        self
    }

    /// Override country.
    pub fn country(mut self, country: String) -> Self {
        self.country = Some(country);
        self
    }

    /// Override region.
    ///
    /// Format of [region codes](https://www.maxmind.com/download/geoip/misc/region_codes.csv) is defined in
    /// [MaxMind's](https://www.maxmind.com/) GeoIP database.
    pub fn region(mut self, region: String) -> Self {
        self.region = Some(region);
        self
    }

    /// Override city.
    ///
    /// Decoded value: ``New York``
    pub fn city(mut self, city: String) -> Self {
        self.city = Some(city);
        self
    }

    /// Override latitude.
    pub fn lat(mut self, lat: f64) -> Self {
        self.lat = Some(lat);
        self
    }

    /// Override longitude.
    pub fn lon(mut self, lon: f64) -> Self {
        self.lon = Some(lon);
        self
    }

    /// Whether the user should be tracked anonymously.
    ///
    /// - ``1`` - all IP bytes will be masked (0.0.0.0), GeoIP data below Country level will be anonymized
    /// - ``0`` - available visitor data will be added to the session
    pub fn uia(mut self, uia: i64) -> Self {
        self.uia = Some(uia);
        self
    }

    /// Indicator of a ping event. Pings update custom variables, custom
    /// dimensions and time metrics of the last page view. They help us
    /// determine time spent on a page.
    ///
    /// - ``1`` - Periodic heartbeat request (sent every X seconds)
    /// - ``2`` - Last heartbeat (sent on page unload event)
    /// - ``3`` - Blur heartbeat (sent on page blur event)
    /// - ``4`` - Request deanonymizing user
    /// - ``5`` - Request with page performance metrics
    /// - ``6`` - Request sent by the user (using ping command)
    pub fn ping(mut self, ping: i64) -> Self {
        self.ping = Some(ping);
        self
    }

    /// Unload Event Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.unloadEventStart`
    pub fn t_us(mut self, t_us: i64) -> Self {
        self.t_us = Some(t_us);
        self
    }

    /// Unload Event End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.unloadEventEnd`
    pub fn t_ue(mut self, t_ue: i64) -> Self {
        self.t_ue = Some(t_ue);
        self
    }

    /// Redirect Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.redirectStart`
    pub fn t_rs(mut self, t_rs: i64) -> Self {
        self.t_rs = Some(t_rs);
        self
    }

    /// Redirect End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.redirectEnd`
    pub fn t_re(mut self, t_re: i64) -> Self {
        self.t_re = Some(t_re);
        self
    }

    /// Secure Connection Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.secureConnectionStart`
    pub fn t_ss(mut self, t_ss: i64) -> Self {
        self.t_ss = Some(t_ss);
        self
    }

    /// Fetch Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.fetchStart`
    pub fn t_fs(mut self, t_fs: i64) -> Self {
        self.t_fs = Some(t_fs);
        self
    }

    /// Domain Lookup Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domainLookupStart`
    pub fn t_ds(mut self, t_ds: i64) -> Self {
        self.t_ds = Some(t_ds);
        self
    }

    /// Connect Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.connectStart`
    pub fn t_cs(mut self, t_cs: i64) -> Self {
        self.t_cs = Some(t_cs);
        self
    }

    /// Connect End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.connectEnd`
    pub fn t_ce(mut self, t_ce: i64) -> Self {
        self.t_ce = Some(t_ce);
        self
    }

    /// Request Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.requestStart`
    pub fn t_qs(mut self, t_qs: i64) -> Self {
        self.t_qs = Some(t_qs);
        self
    }

    /// Response Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.responseStart`
    pub fn t_as(mut self, t_as: i64) -> Self {
        self.t_as = Some(t_as);
        self
    }

    /// Response End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.responseEnd`
    pub fn t_ae(mut self, t_ae: i64) -> Self {
        self.t_ae = Some(t_ae);
        self
    }

    /// DOM Loading - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domLoading`
    pub fn t_dl(mut self, t_dl: i64) -> Self {
        self.t_dl = Some(t_dl);
        self
    }

    /// DOM Interactive - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domInteractive`
    pub fn t_di(mut self, t_di: i64) -> Self {
        self.t_di = Some(t_di);
        self
    }

    /// DOM Content Loaded Event Start - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domContentLoadedEventStart`
    pub fn t_ls(mut self, t_ls: i64) -> Self {
        self.t_ls = Some(t_ls);
        self
    }

    /// DOM Content Loaded Event End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domContentLoadedEventEnd`
    pub fn t_le(mut self, t_le: i64) -> Self {
        self.t_le = Some(t_le);
        self
    }

    /// DOM Complete - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.domComplete`
    pub fn t_dc(mut self, t_dc: i64) -> Self {
        self.t_dc = Some(t_dc);
        self
    }

    /// Load Event End - one of the Page Performance Metrics.
    /// Designed for the value of `PerformanceTiming.loadEventEnd`
    pub fn t_ee(mut self, t_ee: i64) -> Self {
        self.t_ee = Some(t_ee);
        self
    }

    /// Name of a library used for tracking.
    ///
    /// Decoded value: ``iOs SDK``
    pub fn ts_n(mut self, ts_n: String) -> Self {
        self.ts_n = Some(ts_n);
        self
    }

    /// Version of a library used for tracking. [Semantic Versioning](https://semver.org) format required.
    pub fn ts_v(mut self, ts_v: String) -> Self {
        self.ts_v = Some(ts_v);
        self
    }

    /// Provides on-demand control of the SessionHash feature (0=disabled, 1=enabled)
    ///
    /// When this parameter is not used, processing service will default to the current value from the Privacy tab in global or app settings.
    pub fn sh(mut self, sh: i64) -> Self {
        self.sh = Some(sh);
        self
    }

    /// Forces tracker to erase IP information from `cip` query parameter, common headers and socket address when provided with value `1`.
    ///
    /// The erasure happens before the processing, so that IP information is not stored.
    pub fn rmip(mut self, rmip: i64) -> Self {
        self.rmip = Some(rmip);
        self
    }
}

#[cfg(test)]
pub mod test {

    use crate::{PiwikClient, TrackEvent};
    pub const SITE_ID: &str = "51a6273d-6bbe-4ca3-abb2-0561c0c7fe6c";
    pub const INSTANCE_NAME: &str = "test-122269960";

    #[tokio::test]
    async fn test_client() {
        let client = PiwikClient::new(INSTANCE_NAME.to_string(), SITE_ID.to_string()).unwrap();
        let event = TrackEvent::new()
            .url("nil://my-test-app/my-command".to_string())
            ._id("1234567890123456".to_string())
            .action_name("my-command".to_string());
        client.track(event).await.unwrap();
    }
}
