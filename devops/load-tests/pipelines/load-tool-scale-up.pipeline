import groovy.transform.Field

pipeline {
    agent  {
        docker {
            alwaysPull true
            image "592920173613.dkr.ecr.eu-west-1.amazonaws.com/deployer:latest"
            label "devops"
            registryCredentialsId "ecr:eu-west-1:aws-jenkins-user-api-keys"
            registryUrl "https://592920173613.dkr.ecr.eu-west-1.amazonaws.com"
        }
    }

    environment {
        ENV_FILE = "nillion-network-load-tests-env-file"
        JUSTFILE = "devops/load-tests/justfile"
        REPORT_HTML = "**/report_*.html"
    }

    options {
            ansiColor("xterm")
            buildDiscarder(logRotator(numToKeepStr: "30"))
            disableConcurrentBuilds()
            timeout(time: 8, unit: "HOURS")
            timestamps()
    }

    parameters {
        choice(
            name: "NILLION_NETWORK_ENVIRONMENT",
            description: "Environment to run load tests against",
            choices: ["testnet-photon", "perf"]
        )

        string(
            name: "RELEASE_VERSION",
            description: "Tag of nillion repo to use to build load tool AND the release version of the testnet the load tests target",
            defaultValue: params.RELEASE_VERSION
        )

        booleanParam(
            name: "RUN_STORE_SECRET_TESTS",
            description: "Enable store secret test cases",
            defaultValue: true
        )

        booleanParam(
            name: "RUN_RETRIEVE_SECRET_TESTS",
            description: "Enable retrieve secret test cases",
            defaultValue: true
        )

        booleanParam(
            name: "RUN_COMPUTE_TESTS",
            description: "Enable compute test cases",
            defaultValue: true
        )

        choice(
            name: "MAX_OPERATION_INPUT_SIZE",
            description: "Run test cases up to operation size. Applies only to store secret and retrieve secret test cases.",
            choices: operationInputSizeChoices,
        )

        choice(
            name: "MAX_PROGRAM_SIZE",
            description: "Run programs up to this size. RUN_COMPUTE_TESTS must be enabled.",
            choices: programChoices,
        )

        choice(
            name: "MAX_WORKERS",
            description: "Run test cases up to number of workers.",
            choices: workerChoices,
        )

        choice(
            name: "TEST_DURATION",
            description: "Run test cases for this long.",
            choices: ["30s", "60s", "300s"],
        )

        choice(
            name: "RUST_LOG",
            description: "Rust log level to set into environment",
            choices: ["info", "debug", "warn", "error", "none", "none,load_tool=info,nillion_chain_client=debug,tendermint_rpc=debug"]
        )

        booleanParam(
            name: "VERBOSE",
            description: "Enable --verbose flag on load-tool",
            defaultValue: false
        )
    }

    stages {
        stage("Check Env File") {
            steps {
                withCredentials([
                    file(credentialsId: env.ENV_FILE, variable: "envFile")
                ]) {
                    sh "just --dotenv-filename ${envFile} -f $JUSTFILE check-env-file"
                }
            }
        }

        stage("Download SDK and Load Tool") {
            steps {
                script {
                    downloadPath = sh(script: "mktemp -d", returnStdout: true)
                    downloadPath = downloadPath.trim() // Remove newline from above stdout

                    withAwsCredentials(credentialsId: "aws-jenkins-user-api-keys") {
                        sh "just -f devops/justfile download-sdk ${downloadPath} ${params.RELEASE_VERSION}"
                        sh "just -f $JUSTFILE download-load-tool ${downloadPath} ${params.RELEASE_VERSION}"
                    }
                }
            }
        }

        stage("Clone devops Repo") {
            steps {
                withJenkinsGitHubSSHCredentials {
                    sh "just -f devops/justfile clone-devops-repo chore/code-sharing-load-tests"
                }
            }
        }

        stage("Build Programs") {
            when {
                expression {
                    return params.RUN_COMPUTE_TESTS
                }
            }

            steps {
                sh "just -f $JUSTFILE build-programs ${downloadPath}"
            }
        }

        stage("Mark Start Time") {
            steps {
                script {
                    startTime = getTimeInSecs()
                }
            }
        }

        stage("Generate Test Inputs") {
            steps {
                script {
                    def testTypes = []

                    if (params.RUN_STORE_SECRET_TESTS) {
                        testTypes.add([
                            specPath: "./specs/store-secret.yaml",
                            stageName: "Store Secret %sKB (%s users)",
                            testType: "store_secret",
                        ])
                    }

                    if (params.RUN_RETRIEVE_SECRET_TESTS) {
                        testTypes.add([
                            specPath: "./specs/retrieve-secret.yaml",
                            stageName: "Retrieve Secret %sKB (%s users)",
                            testType: "retrieve_secret",
                        ])
                    }

                    if (params.RUN_COMPUTE_TESTS) {
                        def indexOfProgramSizeChoice = programChoices.indexOf(params.MAX_PROGRAM_SIZE)

                        if (indexOfProgramSizeChoice >= programChoices.indexOf("small")) {
                            testTypes.add([
                                specPath: "./specs/compute-small.yaml",
                                stageName: "Compute Small (%s users)",
                                testType: "compute",
                            ])
                        }

                        if (indexOfProgramSizeChoice >= programChoices.indexOf("medium")) {
                            testTypes.add([
                                specPath: "./specs/compute-medium.yaml",
                                stageName: "Compute Medium (%s users)",
                                testType: "compute",
                            ])
                        }

                        if (indexOfProgramSizeChoice >= programChoices.indexOf("large")) {
                            testTypes.add([
                                specPath: "./specs/compute-large.yaml",
                                stageName: "Compute Large (%s users)",
                                testType: "compute",
                            ])
                        }
                    }

                    for (t in testTypes) {
                        for (w in workerChoices) {
                            def iw = w as Integer

                            // Operation input size is irrelevant to compute test cases.
                            if (t.testType.contains("compute")) {
                                def stageName = String.format(t.stageName, w)

                                testInputs.add([
                                    reportJSON: "./report_${toReportJSONSuffix(stageName)}.json",
                                    stageName: stageName,
                                    specPath: t.specPath,
                                    workers: iw,
                                ])
                            } else {
                                for (s in operationInputSizeChoices) {
                                    def is = s as Integer
                                    def stageName = String.format(t.stageName, s, w)

                                    testInputs.add([
                                        reportJSON: "./report_${toReportJSONSuffix(stageName)}.json",
                                        operationInputSize: is,
                                        stageName: stageName,
                                        specPath: t.specPath,
                                        workers: iw,
                                    ])
                                }
                            }
                        }
                    }
                }
            }
        }

        stage("Generate Test Runs") {
            steps {
                script {
                    for (w in workerChoices) {
                        def iw = w as Integer

                        if (iw > (params.MAX_WORKERS as Integer)) {
                            continue
                        }

                        runTestsOnInputs(
                            filterUpTo(testInputs).findAll{i -> i.workers == iw}
                        )
                    }

                    endTime = getTimeInSecs()
                }
            }

            post {
                always {
                    script {
                        sh "just -f $JUSTFILE generate-report ."

                        archiveArtifacts(
                            artifacts: env.REPORT_HTML
                        )
                    }
                }
            }
        }

        stage("Grafana Snapshot") {
            steps {
                script {
                    withCredentials([
                        file(credentialsId: env.ENV_FILE, variable: "envFile")
                    ]) {
                        snapshotURL = sh(script: """
                            just \
                                --dotenv-filename ${envFile} \
                                -f $JUSTFILE grafana-snapshot \
                                ${startTime} \
                                ${endTime} \
                                ${params.NILLION_NETWORK_ENVIRONMENT}
                        """, returnStdout: true)
                        snapshotURL = snapshotURL.trim()

                        if (snapshotURL.equals("")) {
                            error("Snapshot URL is empty")
                        }
                    }
                }
            }
        }

        stage("Set Build Description") {
            steps {
                script {
                    currentBuild.description = """
                        <p><b>Grafana Snapshot</b>: <a href="${snapshotURL}">nillion-network</a></p>
                    """
                }
            }
        }
    }
}

// Locals.
def downloadPath
def endTime
def startTime

// Fields.
@Field def defaultFlowDuration = "60s"
@Field def operationInputSizeChoices = ["64", "512", "4096"]
@Field def programChoices = ["small", "medium", "large"]
@Field def testInputs = []
@Field def workerChoices = ["1", "25", "50", "100", "250", "500"]

// Functions.
def getTimeInSecs() {
   return (int)(System.currentTimeMillis() / 1000)
}

def filterUpTo(inputs) {
    def w = params.MAX_WORKERS as Integer
    def s = params.MAX_OPERATION_INPUT_SIZE as Integer

    return inputs.findAll{i -> (i.operationInputSize == null || i.operationInputSize <= s) && i.workers <= w}
}

def runTestsOnInputs(inputs) {
    for (i in inputs) {
        stage(i.stageName) {
            sh """
                just -f $JUSTFILE render-spec ${i.specPath} \
                    ${i.maxFlowDuration ?: defaultFlowDuration} \
                    ${i.maxTestDuration ?: params.TEST_DURATION} \
                    "${i.operationInputSize ?: ""}" \
                    ${i.workers}
            """

            withCredentials([
                file(credentialsId: env.ENV_FILE, variable: "envFile")
            ]) {
                withSecretsEnv {
                    sh """
                        just \
                            --dotenv-filename ${envFile} \
                            -f $JUSTFILE \
                            run-load-tool \
                            ${downloadPath} \
                            ${params.NILLION_NETWORK_ENVIRONMENT} \
                            ${i.reportJSON} \
                            ${i.specPath}.rendered \
                            ${params.VERBOSE}
                    """
                }
            }
        } // stage
    }
}

def toReportJSONSuffix(stageName) {
    return stageName.toLowerCase()
        .replace(" ", "_")
        .replace("(", "")
        .replace(")", "")
}
